ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3xx_hal_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_PWR_DeInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_PWR_DeInit:
  27              	.LFB126:
  28              		.file 1 "cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c"
   1:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
   2:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   ******************************************************************************
   3:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @file    stm32f3xx_hal_pwr.c
   4:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @author  MCD Application Team
   5:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
   9:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           + Peripheral Control functions
  10:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
  11:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   @verbatim
  12:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   ******************************************************************************
  13:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @attention
  14:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
  15:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  16:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
  17:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  18:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  19:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  20:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  21:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  22:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  23:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  24:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  25:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  26:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *      without specific prior written permission.
  27:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
  28:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  29:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  30:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 2


  31:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  32:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  34:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  36:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  37:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  38:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
  39:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   ******************************************************************************
  40:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
  41:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  42:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  43:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** #include "stm32f3xx_hal.h"
  44:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  45:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /** @addtogroup STM32F3xx_HAL_Driver
  46:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @{
  47:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
  48:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  49:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /** @defgroup PWR PWR
  50:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief PWR HAL module driver
  51:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @{
  52:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
  53:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  54:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  55:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  56:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  57:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  58:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  59:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  60:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  61:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  62:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  63:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  64:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @{
  65:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
  66:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  67:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  68:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  69:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
  70:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** @verbatim
  71:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****  ===============================================================================
  72:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  73:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****  ===============================================================================
  74:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
  75:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data
  76:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       registers and backup SRAM) is protected against possible unwanted
  77:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       write accesses.
  78:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  79:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  80:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  81:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  82:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  83:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** @endverbatim
  84:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @{
  85:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
  86:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  87:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 3


  88:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Deinitializes the PWR peripheral registers to their default reset values.
  89:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
  90:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
  91:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  92:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
  29              		.loc 1 92 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  93:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  34              		.loc 1 93 3 view .LVU1
  35 0000 044B     		ldr	r3, .L2
  36 0002 1A69     		ldr	r2, [r3, #16]
  37 0004 42F08052 		orr	r2, r2, #268435456
  38 0008 1A61     		str	r2, [r3, #16]
  94:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  39              		.loc 1 94 3 view .LVU2
  40 000a 1A69     		ldr	r2, [r3, #16]
  41 000c 22F08052 		bic	r2, r2, #268435456
  42 0010 1A61     		str	r2, [r3, #16]
  95:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
  43              		.loc 1 95 1 is_stmt 0 view .LVU3
  44 0012 7047     		bx	lr
  45              	.L3:
  46              		.align	2
  47              	.L2:
  48 0014 00100240 		.word	1073876992
  49              		.cfi_endproc
  50              	.LFE126:
  52              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  53              		.align	1
  54              		.global	HAL_PWR_EnableBkUpAccess
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	HAL_PWR_EnableBkUpAccess:
  61              	.LFB127:
  96:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
  97:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
  98:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC
  99:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 100:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  If the HSE divided by 32 is used as the RTC clock, the
 101:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 102:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 103:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 104:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 105:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
  62              		.loc 1 105 1 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 106:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_DBP);  
  67              		.loc 1 106 3 view .LVU5
  68 0000 024A     		ldr	r2, .L5
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 4


  69 0002 1368     		ldr	r3, [r2]
  70 0004 43F48073 		orr	r3, r3, #256
  71 0008 1360     		str	r3, [r2]
 107:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
  72              		.loc 1 107 1 is_stmt 0 view .LVU6
  73 000a 7047     		bx	lr
  74              	.L6:
  75              		.align	2
  76              	.L5:
  77 000c 00700040 		.word	1073770496
  78              		.cfi_endproc
  79              	.LFE127:
  81              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  82              		.align	1
  83              		.global	HAL_PWR_DisableBkUpAccess
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv4-sp-d16
  89              	HAL_PWR_DisableBkUpAccess:
  90              	.LFB128:
 108:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 109:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 110:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC
 111:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 112:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  If the HSE divided by 32 is used as the RTC clock, the
 113:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 114:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 115:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 116:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 117:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
  91              		.loc 1 117 1 is_stmt 1 view -0
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 0
  94              		@ frame_needed = 0, uses_anonymous_args = 0
  95              		@ link register save eliminated.
 118:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR, PWR_CR_DBP);  
  96              		.loc 1 118 3 view .LVU8
  97 0000 024A     		ldr	r2, .L8
  98 0002 1368     		ldr	r3, [r2]
  99 0004 23F48073 		bic	r3, r3, #256
 100 0008 1360     		str	r3, [r2]
 119:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 101              		.loc 1 119 1 is_stmt 0 view .LVU9
 102 000a 7047     		bx	lr
 103              	.L9:
 104              		.align	2
 105              	.L8:
 106 000c 00700040 		.word	1073770496
 107              		.cfi_endproc
 108              	.LFE128:
 110              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 111              		.align	1
 112              		.global	HAL_PWR_EnableWakeUpPin
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 5


 116              		.fpu fpv4-sp-d16
 118              	HAL_PWR_EnableWakeUpPin:
 119              	.LVL0:
 120              	.LFB129:
 120:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 121:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 122:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @}
 123:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 124:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 125:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 126:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
 127:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *
 128:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** @verbatim
 129:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 130:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****  ===============================================================================
 131:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 132:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****  ===============================================================================
 133:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     
 134:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 135:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     ================================
 136:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
 137:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) WakeUp pin is used to wakeup the system from Standby mode. This pin is
 138:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           forced in input pull down configuration and is active on rising edges.
 139:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) There are up to three WakeUp pins:
 140:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++)WakeUp Pin 1 on PA.00.
 141:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++)WakeUp Pin 2 on PC.13 (STM32F303xC, STM32F303xE only).
 142:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++)WakeUp Pin 3 on PE.06.
 143:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 144:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     *** Main and Backup Regulators configuration ***
 145:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     ================================================
 146:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
 147:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD)
 148:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to
 149:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           save battery life.
 150:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 151:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
 152:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           protected to prevent confidential data, such as cryptographic private
 153:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           key, from being accessed. The backup SRAM can be erased only through
 154:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           the Flash interface when a protection level change from level 1 to
 155:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           level 0 is requested.
 156:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
 157:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           programming manual.
 158:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 159:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****         Refer to the datasheets for more details.
 160:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 161:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     *** Low Power modes configuration ***
 162:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     =====================================
 163:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
 164:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 165:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 166:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator
 167:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           in low power mode
 168:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off (mode not available on STM32F3x8 devices).
 169:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 170:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    *** Sleep mode ***
 171:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    ==================
 172:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 6


 173:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Entry:
 174:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_S
 175:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****               functions with
 176:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 177:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 178:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****      
 179:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Exit:
 180:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 181:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 182:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 183:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    *** Stop mode ***
 184:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    =================
 185:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
 186:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.8V domain are stopped, the PLL, the HSI,
 187:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents
 188:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       are preserved.
 189:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode to minimize the co
 190:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 191:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Entry:
 192:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPEN
 193:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****              function with:
 194:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) Main regulator ON or
 195:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) Low Power regulator ON.
 196:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter STOP mode with WFI instruction or
 197:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter STOP mode with WFE instruction
 198:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Exit:
 199:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 200:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) Some specific communication peripherals (CEC, USART, I2C) interrupts, 
 201:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                when programmed in wakeup mode (the peripheral must be 
 202:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                programmed in wakeup mode and the corresponding interrupt vector 
 203:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                must be enabled in the NVIC).
 204:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 205:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    *** Standby mode ***
 206:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    ====================
 207:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****      [..]
 208:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based
 209:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       on the Cortex-M4 deep sleep mode, with the voltage regulator disabled.
 210:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       The 1.8V domain is consequently powered off. The PLL, the HSI oscillator and
 211:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost
 212:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby
 213:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       circuitry.
 214:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       The voltage regulator is OFF.
 215:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 216:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Entry:
 217:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 218:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (+) Exit:
 219:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****           (++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 220:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 221:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 222:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 223:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****    =============================================
 224:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     [..]
 225:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC
 226:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 227:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       without depending on an external interrupt (Auto-wakeup mode).
 228:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 229:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     (+) RTC auto-wakeup (AWU) from the Stop and Standby modes
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 7


 230:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 231:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to
 232:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****             configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 233:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 234:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it
 235:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****            is necessary to configure the RTC to detect the tamper or time stamp event using the
 236:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****            HAL_RTC_SetTimeStamp_IT() or HAL_RTC_SetTamper_IT() functions.
 237:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 238:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 239:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****            configure the RTC to generate the RTC WakeUp event using the HAL_RTC_SetWakeUpTimer_IT()
 240:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 241:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     (+) Comparator auto-wakeup (AWU) from the Stop mode
 242:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 243:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****       (++) To wake up from the Stop mode with a comparator wakeup event, it is necessary to:
 244:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****            (+++) Configure the EXTI Line associated with the comparator (example EXTI Line 22 for c
 245:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                  to be sensitive to to the selected edges (falling, rising or falling 
 246:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****                  and rising) (Interrupt or Event modes) using the EXTI_Init() function.
 247:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****            (+++) Configure the comparator to generate the event.      
 248:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** @endverbatim
 249:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @{
 250:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 251:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 252:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 253:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Enables the WakeUp PINx functionality.
 254:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to enable.
 255:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         This parameter can be value of :
 256:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           @ref PWR_WakeUp_Pins
 257:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 258:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 259:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 260:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 121              		.loc 1 260 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 261:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Check the parameters */
 262:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 126              		.loc 1 262 3 view .LVU11
 263:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Enable the EWUPx pin */
 264:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SET_BIT(PWR->CSR, WakeUpPinx);
 127              		.loc 1 264 3 view .LVU12
 128 0000 024A     		ldr	r2, .L11
 129 0002 5368     		ldr	r3, [r2, #4]
 130 0004 1843     		orrs	r0, r0, r3
 131              	.LVL1:
 132              		.loc 1 264 3 is_stmt 0 view .LVU13
 133 0006 5060     		str	r0, [r2, #4]
 265:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 134              		.loc 1 265 1 view .LVU14
 135 0008 7047     		bx	lr
 136              	.L12:
 137 000a 00BF     		.align	2
 138              	.L11:
 139 000c 00700040 		.word	1073770496
 140              		.cfi_endproc
 141              	.LFE129:
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 8


 143              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 144              		.align	1
 145              		.global	HAL_PWR_DisableWakeUpPin
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu fpv4-sp-d16
 151              	HAL_PWR_DisableWakeUpPin:
 152              	.LVL2:
 153              	.LFB130:
 266:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 267:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 268:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Disables the WakeUp PINx functionality.
 269:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to disable.
 270:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         This parameter can be values of :
 271:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           @ref PWR_WakeUp_Pins
 272:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 273:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 274:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 275:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 154              		.loc 1 275 1 is_stmt 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 276:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Check the parameters */
 277:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 159              		.loc 1 277 3 view .LVU16
 278:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Disable the EWUPx pin */
 279:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   CLEAR_BIT(PWR->CSR, WakeUpPinx);
 160              		.loc 1 279 3 view .LVU17
 161 0000 024A     		ldr	r2, .L14
 162 0002 5368     		ldr	r3, [r2, #4]
 163 0004 23EA0000 		bic	r0, r3, r0
 164              	.LVL3:
 165              		.loc 1 279 3 is_stmt 0 view .LVU18
 166 0008 5060     		str	r0, [r2, #4]
 280:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 167              		.loc 1 280 1 view .LVU19
 168 000a 7047     		bx	lr
 169              	.L15:
 170              		.align	2
 171              	.L14:
 172 000c 00700040 		.word	1073770496
 173              		.cfi_endproc
 174              	.LFE130:
 176              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 177              		.align	1
 178              		.global	HAL_PWR_EnterSLEEPMode
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv4-sp-d16
 184              	HAL_PWR_EnterSLEEPMode:
 185              	.LVL4:
 186              	.LFB131:
 281:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 9


 282:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 283:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 284:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  In Sleep mode, all I/O pins keep the same state as in Run mode.
 285:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in SLEEP mode.
 286:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 287:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
 288:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 289:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note This parameter has no effect in F3 family and is just maintained to 
 290:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       offer full portability of other STM32 families softwares.
 291:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @param SLEEPEntry Specifies if SLEEP mode is entered with WFI or WFE instruction.
 292:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           When WFI entry is used, tick interrupt have to be disabled if not desired as 
 293:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           the interrupt wake up source.
 294:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 295:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 296:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 297:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 298:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 299:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 300:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 187              		.loc 1 300 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 301:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Check the parameters */
 302:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 192              		.loc 1 302 3 view .LVU21
 303:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 304:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 305:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 193              		.loc 1 305 3 view .LVU22
 194              		.loc 1 305 12 is_stmt 0 view .LVU23
 195 0000 064A     		ldr	r2, .L20
 196 0002 1369     		ldr	r3, [r2, #16]
 197 0004 23F00403 		bic	r3, r3, #4
 198 0008 1361     		str	r3, [r2, #16]
 306:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 307:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 308:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 199              		.loc 1 308 3 is_stmt 1 view .LVU24
 200              		.loc 1 308 5 is_stmt 0 view .LVU25
 201 000a 0129     		cmp	r1, #1
 202 000c 03D0     		beq	.L19
 309:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   {
 310:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 311:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __WFI();
 312:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   }
 313:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   else
 314:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   {
 315:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     /* Request Wait For Event */
 316:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __SEV();
 203              		.loc 1 316 5 is_stmt 1 view .LVU26
 204              	.LBB20:
 205              	.LBI20:
 206              		.file 2 "cube/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 10


   3:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 11


  60:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 12


 117:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 13


 174:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 14


 231:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 15


 288:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 16


 345:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 17


 402:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 207              		.loc 2 404 53 view .LVU27
 208              	.LBB21:
 405:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:cube/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 209              		.loc 2 406 3 view .LVU28
 210              		.syntax unified
 211              	@ 406 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 212 000e 40BF     		sev
 213              	@ 0 "" 2
 214              		.thumb
 215              		.syntax unified
 216              	.LBE21:
 217              	.LBE20:
 317:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __WFE();
 218              		.loc 1 317 5 view .LVU29
 219              	.LBB22:
 220              	.LBI22:
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221              		.loc 2 394 53 view .LVU30
 222              	.LBB23:
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 223              		.loc 2 396 3 view .LVU31
 224              		.syntax unified
 225              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 226 0010 20BF     		wfe
 227              	@ 0 "" 2
 228              		.thumb
 229              		.syntax unified
 230              	.LBE23:
 231              	.LBE22:
 318:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __WFE();
 232              		.loc 1 318 5 view .LVU32
 233              	.LBB24:
 234              	.LBI24:
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235              		.loc 2 394 53 view .LVU33
 236              	.LBB25:
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 237              		.loc 2 396 3 view .LVU34
 238              		.syntax unified
 239              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 240 0012 20BF     		wfe
 241              	@ 0 "" 2
 242              		.thumb
 243              		.syntax unified
 244              	.LBE25:
 245              	.LBE24:
 319:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   }
 320:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 246              		.loc 1 320 1 is_stmt 0 view .LVU35
 247 0014 7047     		bx	lr
 248              	.L19:
 311:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   }
 249              		.loc 1 311 5 is_stmt 1 view .LVU36
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 18


 250              	.LBB26:
 251              	.LBI26:
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 252              		.loc 2 383 53 view .LVU37
 253              	.LBB27:
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254              		.loc 2 385 3 view .LVU38
 255              		.syntax unified
 256              	@ 385 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 257 0016 30BF     		wfi
 258              	@ 0 "" 2
 259              		.thumb
 260              		.syntax unified
 261 0018 7047     		bx	lr
 262              	.L21:
 263 001a 00BF     		.align	2
 264              	.L20:
 265 001c 00ED00E0 		.word	-536810240
 266              	.LBE27:
 267              	.LBE26:
 268              		.cfi_endproc
 269              	.LFE131:
 271              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 272              		.align	1
 273              		.global	HAL_PWR_EnterSTOPMode
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu fpv4-sp-d16
 279              	HAL_PWR_EnterSTOPMode:
 280              	.LVL5:
 281              	.LFB132:
 321:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 322:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 323:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Enters STOP mode.
 324:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 325:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  When exiting Stop mode by issuing an interrupt or a wakeup event,
 326:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 327:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode, an additional
 328:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode.
 329:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption
 330:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *         is higher although the startup time is reduced.
 331:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in STOP mode.
 332:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 333:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: STOP mode with regulator ON
 334:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: STOP mode with low power regulator ON
 335:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @param STOPEntry specifies if STOP mode in entered with WFI or WFE instruction.
 336:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 337:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI:Enter STOP mode with WFI instruction
 338:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter STOP mode with WFE instruction
 339:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 340:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 341:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 342:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 282              		.loc 1 342 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 19


 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 343:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   uint32_t tmpreg = 0U;
 287              		.loc 1 343 3 view .LVU40
 344:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 345:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Check the parameters */
 346:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 288              		.loc 1 346 3 view .LVU41
 347:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 289              		.loc 1 347 3 view .LVU42
 348:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 349:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 350:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   tmpreg = PWR->CR;
 290              		.loc 1 350 3 view .LVU43
 291              		.loc 1 350 10 is_stmt 0 view .LVU44
 292 0000 0B4A     		ldr	r2, .L26
 293 0002 1368     		ldr	r3, [r2]
 294              	.LVL6:
 351:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   
 352:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Clear PDDS and LPDS bits */
 353:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   tmpreg &= (uint32_t)~(PWR_CR_PDDS | PWR_CR_LPDS);
 295              		.loc 1 353 3 is_stmt 1 view .LVU45
 296              		.loc 1 353 10 is_stmt 0 view .LVU46
 297 0004 23F00303 		bic	r3, r3, #3
 298              	.LVL7:
 354:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 355:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Set LPDS bit according to Regulator value */
 356:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   tmpreg |= Regulator;
 299              		.loc 1 356 3 is_stmt 1 view .LVU47
 300              		.loc 1 356 10 is_stmt 0 view .LVU48
 301 0008 1843     		orrs	r0, r0, r3
 302              	.LVL8:
 357:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 358:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Store the new value */
 359:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   PWR->CR = tmpreg;
 303              		.loc 1 359 3 is_stmt 1 view .LVU49
 304              		.loc 1 359 11 is_stmt 0 view .LVU50
 305 000a 1060     		str	r0, [r2]
 360:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 361:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 362:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 306              		.loc 1 362 3 is_stmt 1 view .LVU51
 307              		.loc 1 362 12 is_stmt 0 view .LVU52
 308 000c 094A     		ldr	r2, .L26+4
 309 000e 1369     		ldr	r3, [r2, #16]
 310 0010 43F00403 		orr	r3, r3, #4
 311 0014 1361     		str	r3, [r2, #16]
 363:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 364:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 365:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 312              		.loc 1 365 3 is_stmt 1 view .LVU53
 313              		.loc 1 365 5 is_stmt 0 view .LVU54
 314 0016 0129     		cmp	r1, #1
 315 0018 08D0     		beq	.L25
 366:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   {
 367:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 368:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __WFI();
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 20


 369:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   }
 370:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   else
 371:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   {
 372:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     /* Request Wait For Event */
 373:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __SEV();
 316              		.loc 1 373 5 is_stmt 1 view .LVU55
 317              	.LBB28:
 318              	.LBI28:
 404:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 319              		.loc 2 404 53 view .LVU56
 320              	.LBB29:
 321              		.loc 2 406 3 view .LVU57
 322              		.syntax unified
 323              	@ 406 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 324 001a 40BF     		sev
 325              	@ 0 "" 2
 326              		.thumb
 327              		.syntax unified
 328              	.LBE29:
 329              	.LBE28:
 374:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __WFE();
 330              		.loc 1 374 5 view .LVU58
 331              	.LBB30:
 332              	.LBI30:
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333              		.loc 2 394 53 view .LVU59
 334              	.LBB31:
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335              		.loc 2 396 3 view .LVU60
 336              		.syntax unified
 337              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 338 001c 20BF     		wfe
 339              	@ 0 "" 2
 340              		.thumb
 341              		.syntax unified
 342              	.LBE31:
 343              	.LBE30:
 375:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****     __WFE();
 344              		.loc 1 375 5 view .LVU61
 345              	.LBB32:
 346              	.LBI32:
 394:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 347              		.loc 2 394 53 view .LVU62
 348              	.LBB33:
 396:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 349              		.loc 2 396 3 view .LVU63
 350              		.syntax unified
 351              	@ 396 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 352 001e 20BF     		wfe
 353              	@ 0 "" 2
 354              		.thumb
 355              		.syntax unified
 356              	.L24:
 357              	.LBE33:
 358              	.LBE32:
 376:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   }
 377:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 21


 378:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 379:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 359              		.loc 1 379 3 view .LVU64
 360              		.loc 1 379 12 is_stmt 0 view .LVU65
 361 0020 044A     		ldr	r2, .L26+4
 362 0022 1369     		ldr	r3, [r2, #16]
 363 0024 23F00403 		bic	r3, r3, #4
 364 0028 1361     		str	r3, [r2, #16]
 380:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 365              		.loc 1 380 1 view .LVU66
 366 002a 7047     		bx	lr
 367              	.L25:
 368:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   }
 368              		.loc 1 368 5 is_stmt 1 view .LVU67
 369              	.LBB34:
 370              	.LBI34:
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 371              		.loc 2 383 53 view .LVU68
 372              	.LBB35:
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 373              		.loc 2 385 3 view .LVU69
 374              		.syntax unified
 375              	@ 385 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 376 002c 30BF     		wfi
 377              	@ 0 "" 2
 378              		.thumb
 379              		.syntax unified
 380 002e F7E7     		b	.L24
 381              	.L27:
 382              		.align	2
 383              	.L26:
 384 0030 00700040 		.word	1073770496
 385 0034 00ED00E0 		.word	-536810240
 386              	.LBE35:
 387              	.LBE34:
 388              		.cfi_endproc
 389              	.LFE132:
 391              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 392              		.align	1
 393              		.global	HAL_PWR_EnterSTANDBYMode
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu fpv4-sp-d16
 399              	HAL_PWR_EnterSTANDBYMode:
 400              	.LFB133:
 381:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 382:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 383:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Enters STANDBY mode.
 384:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note  In Standby mode, all I/O pins are high impedance except for:
 385:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          - Reset pad (still available), 
 386:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          - RTC alternate function pins if configured for tamper, time-stamp, RTC
 387:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out, 
 388:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *          - WKUP pins if enabled.
 389:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 390:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 391:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 22


 392:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 401              		.loc 1 392 1 view -0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              		@ link register save eliminated.
 393:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Select STANDBY mode */
 394:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 406              		.loc 1 394 3 view .LVU71
 407              		.loc 1 394 11 is_stmt 0 view .LVU72
 408 0000 054A     		ldr	r2, .L29
 409 0002 1368     		ldr	r3, [r2]
 410 0004 43F00203 		orr	r3, r3, #2
 411 0008 1360     		str	r3, [r2]
 395:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 396:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 397:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 412              		.loc 1 397 3 is_stmt 1 view .LVU73
 413              		.loc 1 397 12 is_stmt 0 view .LVU74
 414 000a 044A     		ldr	r2, .L29+4
 415 000c 1369     		ldr	r3, [r2, #16]
 416 000e 43F00403 		orr	r3, r3, #4
 417 0012 1361     		str	r3, [r2, #16]
 398:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 399:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 400:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** #if defined ( __CC_ARM)
 401:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   __force_stores();
 402:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** #endif
 403:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 404:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   __WFI();
 418              		.loc 1 404 3 is_stmt 1 view .LVU75
 419              	.LBB36:
 420              	.LBI36:
 383:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 421              		.loc 2 383 53 view .LVU76
 422              	.LBB37:
 385:cube/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 423              		.loc 2 385 3 view .LVU77
 424              		.syntax unified
 425              	@ 385 "cube/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 426 0014 30BF     		wfi
 427              	@ 0 "" 2
 428              		.thumb
 429              		.syntax unified
 430              	.LBE37:
 431              	.LBE36:
 405:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 432              		.loc 1 405 1 is_stmt 0 view .LVU78
 433 0016 7047     		bx	lr
 434              	.L30:
 435              		.align	2
 436              	.L29:
 437 0018 00700040 		.word	1073770496
 438 001c 00ED00E0 		.word	-536810240
 439              		.cfi_endproc
 440              	.LFE133:
 442              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 23


 443              		.align	1
 444              		.global	HAL_PWR_EnableSleepOnExit
 445              		.syntax unified
 446              		.thumb
 447              		.thumb_func
 448              		.fpu fpv4-sp-d16
 450              	HAL_PWR_EnableSleepOnExit:
 451              	.LFB134:
 406:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 407:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 408:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 409:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 410:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 411:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 412:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       interruptions handling.         
 413:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 414:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 415:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 416:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 452              		.loc 1 416 1 is_stmt 1 view -0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 0
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 417:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 418:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 457              		.loc 1 418 3 view .LVU80
 458 0000 024A     		ldr	r2, .L32
 459 0002 1369     		ldr	r3, [r2, #16]
 460 0004 43F00203 		orr	r3, r3, #2
 461 0008 1361     		str	r3, [r2, #16]
 419:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 462              		.loc 1 419 1 is_stmt 0 view .LVU81
 463 000a 7047     		bx	lr
 464              	.L33:
 465              		.align	2
 466              	.L32:
 467 000c 00ED00E0 		.word	-536810240
 468              		.cfi_endproc
 469              	.LFE134:
 471              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 472              		.align	1
 473              		.global	HAL_PWR_DisableSleepOnExit
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv4-sp-d16
 479              	HAL_PWR_DisableSleepOnExit:
 480              	.LFB135:
 420:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 421:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 422:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 423:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 424:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 425:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 426:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 427:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 24


 428:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 429:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 481              		.loc 1 429 1 is_stmt 1 view -0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 430:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 431:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 486              		.loc 1 431 3 view .LVU83
 487 0000 024A     		ldr	r2, .L35
 488 0002 1369     		ldr	r3, [r2, #16]
 489 0004 23F00203 		bic	r3, r3, #2
 490 0008 1361     		str	r3, [r2, #16]
 432:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 491              		.loc 1 432 1 is_stmt 0 view .LVU84
 492 000a 7047     		bx	lr
 493              	.L36:
 494              		.align	2
 495              	.L35:
 496 000c 00ED00E0 		.word	-536810240
 497              		.cfi_endproc
 498              	.LFE135:
 500              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 501              		.align	1
 502              		.global	HAL_PWR_EnableSEVOnPend
 503              		.syntax unified
 504              		.thumb
 505              		.thumb_func
 506              		.fpu fpv4-sp-d16
 508              	HAL_PWR_EnableSEVOnPend:
 509              	.LFB136:
 433:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 434:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 435:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 436:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 437:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Enables CORTEX M4 SEVONPEND bit. 
 438:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 439:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 440:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 441:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 442:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 443:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 510              		.loc 1 443 1 is_stmt 1 view -0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 444:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 445:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 515              		.loc 1 445 3 view .LVU86
 516 0000 024A     		ldr	r2, .L38
 517 0002 1369     		ldr	r3, [r2, #16]
 518 0004 43F01003 		orr	r3, r3, #16
 519 0008 1361     		str	r3, [r2, #16]
 446:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 520              		.loc 1 446 1 is_stmt 0 view .LVU87
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 25


 521 000a 7047     		bx	lr
 522              	.L39:
 523              		.align	2
 524              	.L38:
 525 000c 00ED00E0 		.word	-536810240
 526              		.cfi_endproc
 527              	.LFE136:
 529              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 530              		.align	1
 531              		.global	HAL_PWR_DisableSEVOnPend
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	HAL_PWR_DisableSEVOnPend:
 538              	.LFB137:
 447:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 448:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** 
 449:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** /**
 450:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @brief Disables CORTEX M4 SEVONPEND bit. 
 451:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 452:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 453:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   * @retval None
 454:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   */
 455:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 456:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** {
 539              		.loc 1 456 1 is_stmt 1 view -0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 457:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 458:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 544              		.loc 1 458 3 view .LVU89
 545 0000 024A     		ldr	r2, .L41
 546 0002 1369     		ldr	r3, [r2, #16]
 547 0004 23F01003 		bic	r3, r3, #16
 548 0008 1361     		str	r3, [r2, #16]
 459:cube/Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c **** }
 549              		.loc 1 459 1 is_stmt 0 view .LVU90
 550 000a 7047     		bx	lr
 551              	.L42:
 552              		.align	2
 553              	.L41:
 554 000c 00ED00E0 		.word	-536810240
 555              		.cfi_endproc
 556              	.LFE137:
 558              		.text
 559              	.Letext0:
 560              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\include
 561              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\include
 562              		.file 5 "cube/Drivers/CMSIS/Include/core_cm4.h"
 563              		.file 6 "cube/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 564              		.file 7 "cube/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 565              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\lib\\gcc\\arm-none-eab
 566              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\include
 567              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\includ
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 26


 568              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\includ
 569              		.file 12 "cube/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 stm32f3xx_hal_pwr.c
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:18     .text.HAL_PWR_DeInit:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:26     .text.HAL_PWR_DeInit:00000000 HAL_PWR_DeInit
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:48     .text.HAL_PWR_DeInit:00000014 $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:53     .text.HAL_PWR_EnableBkUpAccess:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:60     .text.HAL_PWR_EnableBkUpAccess:00000000 HAL_PWR_EnableBkUpAccess
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:77     .text.HAL_PWR_EnableBkUpAccess:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:82     .text.HAL_PWR_DisableBkUpAccess:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:89     .text.HAL_PWR_DisableBkUpAccess:00000000 HAL_PWR_DisableBkUpAccess
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:106    .text.HAL_PWR_DisableBkUpAccess:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:111    .text.HAL_PWR_EnableWakeUpPin:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:118    .text.HAL_PWR_EnableWakeUpPin:00000000 HAL_PWR_EnableWakeUpPin
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:139    .text.HAL_PWR_EnableWakeUpPin:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:144    .text.HAL_PWR_DisableWakeUpPin:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:151    .text.HAL_PWR_DisableWakeUpPin:00000000 HAL_PWR_DisableWakeUpPin
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:172    .text.HAL_PWR_DisableWakeUpPin:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:177    .text.HAL_PWR_EnterSLEEPMode:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:184    .text.HAL_PWR_EnterSLEEPMode:00000000 HAL_PWR_EnterSLEEPMode
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:265    .text.HAL_PWR_EnterSLEEPMode:0000001c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:272    .text.HAL_PWR_EnterSTOPMode:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:279    .text.HAL_PWR_EnterSTOPMode:00000000 HAL_PWR_EnterSTOPMode
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:384    .text.HAL_PWR_EnterSTOPMode:00000030 $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:392    .text.HAL_PWR_EnterSTANDBYMode:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:399    .text.HAL_PWR_EnterSTANDBYMode:00000000 HAL_PWR_EnterSTANDBYMode
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:437    .text.HAL_PWR_EnterSTANDBYMode:00000018 $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:443    .text.HAL_PWR_EnableSleepOnExit:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:450    .text.HAL_PWR_EnableSleepOnExit:00000000 HAL_PWR_EnableSleepOnExit
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:467    .text.HAL_PWR_EnableSleepOnExit:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:472    .text.HAL_PWR_DisableSleepOnExit:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:479    .text.HAL_PWR_DisableSleepOnExit:00000000 HAL_PWR_DisableSleepOnExit
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:496    .text.HAL_PWR_DisableSleepOnExit:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:501    .text.HAL_PWR_EnableSEVOnPend:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:508    .text.HAL_PWR_EnableSEVOnPend:00000000 HAL_PWR_EnableSEVOnPend
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:525    .text.HAL_PWR_EnableSEVOnPend:0000000c $d
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:530    .text.HAL_PWR_DisableSEVOnPend:00000000 $t
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:537    .text.HAL_PWR_DisableSEVOnPend:00000000 HAL_PWR_DisableSEVOnPend
C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s:554    .text.HAL_PWR_DisableSEVOnPend:0000000c $d
                           .group:00000000 wm4.0.a9549919c595c19c35ef13bc9ee4c8af
                           .group:00000000 wm4.target_vl53l1_1.h.12.5039e74bcd507e129caba66ab5fc05af
                           .group:00000000 wm4.stm32f3xx_hal_conf.h.37.cb1c9cb802da867d86527a1477311c20
                           .group:00000000 wm4.stm32f3xx.h.55.fe34e0340b06ab20c90f3cf1d792e0eb
                           .group:00000000 wm4.stm32f303xc.h.51.75494ed92b93e6861874d99c51c92793
                           .group:00000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:00000000 wm4.features.h.33.d0b7f3cd6ee95f610104014bb3ed522a
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.core_cm4.h.74.09ac1776756364a5a5d23084aa23e459
                           .group:00000000 wm4.cmsis_gcc.h.36.39970cb43ce4b53c82644a1f9bc2eab9
                           .group:00000000 wm4.core_cm4.h.223.390ff9b0e06949b13520d8b6746f63e8
                           .group:00000000 wm4.stm32f303xc.h.710.b77655c64e6ea7efdc9ab6a96701a5ae
                           .group:00000000 wm4.stm32f3xx.h.191.245d83eb21a6c69e2950c577a7134277
                           .group:00000000 wm4.newlib.h.8.f6e543eac3f2f65163ba2ffe3b04987b
                           .group:00000000 wm4.ieeefp.h.77.5499ed899a78229fbaf6d102924f4714
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
ARM GAS  C:\Users\Berbardo\AppData\Local\Temp\cc5aNb8b.s 			page 28


                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.c2dcbbb5c1f4f0e5cb716ebf7776da48
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.2a55589bfa3ee24eeb84e3c79458e4a9
                           .group:00000000 wm4.stm32f3xx_hal_def.h.76.500c7c9bfcb8d4adebf82d1af27ff044
                           .group:00000000 wm4.stm32f3xx_hal_rcc.h.64.60ee232241a99e19acd27637eebe4f1c
                           .group:00000000 wm4.stm32f3xx_hal_rcc_ex.h.38.1fba3945551953e78cf69c94a0383651
                           .group:00000000 wm4.stm32f3xx_hal_gpio.h.38.11db931fcbf37182e25c3927ddf6e8ba
                           .group:00000000 wm4.stm32f3xx_hal_gpio_ex.h.38.8d493744f4b7a4f7a0f4f97db0ccbd8e
                           .group:00000000 wm4.stm32f3xx_hal_dma.h.38.61966c780efd486aa451ae49ca247997
                           .group:00000000 wm4.stm32f3xx_hal_dma_ex.h.38.195e7d437d9280b9f4e6bae0fa00db04
                           .group:00000000 wm4.stm32f3xx_hal_dma.h.423.83da80eb3e6ae96f050d0c5e4b55e4b9
                           .group:00000000 wm4.stm32f3xx_hal_cortex.h.38.c5c1d06be9dad8e7837dbe16f3535233
                           .group:00000000 wm4.stm32f3xx_hal_flash.h.38.2b4c202390dfbe69a578ce118ab4d799
                           .group:00000000 wm4.stm32f3xx_hal_flash_ex.h.38.36f8341b05728c01a88b7f1003837b1f
                           .group:00000000 wm4.stm32f3xx_hal_i2c.h.38.e3750f5f029ebf729a7cf07e85cad615
                           .group:00000000 wm4.stm32f3xx_hal_i2c_ex.h.38.74099379a9814ae4d6d1c8682fdde7ad
                           .group:00000000 wm4.stm32f3xx_hal_i2c.h.626.05cba3c85b66bb4631bfd2ebbfab1b06
                           .group:00000000 wm4.stm32f3xx_hal_pwr.h.38.efb6ce75a5c12d6b2c7c914e7a94ec2b
                           .group:00000000 wm4.stm32f3xx_hal_pwr_ex.h.38.d228edc56905d96af2d831d3c8e0487a
                           .group:00000000 wm4.stm32f3xx_hal.h.60.e1acc37932101d84a977b19b7a581169

NO UNDEFINED SYMBOLS
